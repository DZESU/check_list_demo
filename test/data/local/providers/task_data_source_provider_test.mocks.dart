// Mocks generated by Mockito 5.4.4 from annotations
// in check_list_demo/test/data/local/providers/task_data_source_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:check_list_demo/shared/data/local/data_sources/hive_service.dart'
    as _i4;
import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HiveService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveService<T> extends _i1.Mock implements _i4.HiveService<T> {
  MockHiveService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Box<T> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBox_0<T>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.Box<T>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<T?> get(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i3.Future<T?>.value(),
      ) as _i3.Future<T?>);

  @override
  _i3.Future<List<T>?> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<T>?>.value(),
      ) as _i3.Future<List<T>?>);

  @override
  _i3.Future<bool> has(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #has,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> remove(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<T> set(
    dynamic key,
    T? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            key,
            data,
          ],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #set,
                  [
                    key,
                    data,
                  ],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #set,
                [
                  key,
                  data,
                ],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<T> update(
    dynamic key,
    T? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            key,
            data,
          ],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #update,
                  [
                    key,
                    data,
                  ],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #update,
                [
                  key,
                  data,
                ],
              ),
            ),
      ) as _i3.Future<T>);
}
